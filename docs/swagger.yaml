basePath: /api
definitions:
  dto.CountByStatus:
    properties:
      count:
        description: Count status
        example: 12
        type: integer
      status:
        description: Status
        example: REVIEWING
        type: string
      type:
        description: 'Type: QUOATATION, PRODUCTION'
        example: QUOTATION
        type: string
    required:
    - count
    - status
    - type
    type: object
  dto.CreatePriceRef:
    properties:
      color:
        description: Color
        example: "1"
        type: string
      gram:
        description: Gram
        example: 12
        type: integer
      hasReference:
        description: HasReference
        example: false
        type: boolean
      page:
        description: Page
        example: 30
        type: integer
      pattern:
        description: Pattern
        example: TABLE
        type: string
      plate:
        description: Plate
        example: LARGE
        type: string
      priceRef:
        description: Price
        example: 5.5
        type: number
      productTitle:
        description: ProductTitle
        example: cut8
        type: string
      tierId:
        description: TierID
        example: 1
        type: integer
    type: object
  dto.CreateQuotation:
    properties:
      appointmentAt:
        description: Appointment date (null is now)
        example: 2024-12-00:00:00.0000+07:00
        type: string
      dueDateAt:
        description: Last due date
        example: "2024-12-06"
        type: string
      items:
        description: Quotation product list
        items:
          $ref: '#/definitions/dto.QuotationItem'
        type: array
      remark:
        description: Any remark
        example: remark test
        type: string
      schoolId:
        description: School id
        example: 2
        type: integer
      userId:
        description: Owner uuid
        example: 78705ee5-25cd-45b5-8cb1-63f1cb94e5c8
        type: string
    required:
    - dueDateAt
    - items
    - schoolId
    - userId
    type: object
  dto.CreateSchool:
    properties:
      address:
        description: Address
        example: 81 test address
        type: string
      name:
        description: Name
        example: school 2
        type: string
      telephone:
        description: Telephone
        example: "0815231112"
        type: string
      userId:
        description: UserID
        example: ebf889fd-4f3c-4c15-b44b-1d37cd2ee5e4
        type: string
    required:
    - address
    - name
    - telephone
    - userId
    type: object
  dto.CreateUser:
    properties:
      password:
        description: Secure password
        example: Password@1234
        type: string
      storeName:
        description: User's shop name
        example: Example Shop
        type: string
      tierId:
        description: User tier (1,2,3)
        example: 1
        type: integer
      username:
        description: Username
        example: testuser123
        type: string
    required:
    - password
    - storeName
    - tierId
    - username
    type: object
  dto.Login:
    properties:
      password:
        description: Password
        example: Password@123
        minLength: 8
        type: string
      username:
        description: Username
        example: testuser123
        type: string
    required:
    - password
    - username
    type: object
  dto.PriceRefResponse:
    properties:
      color:
        description: Color
        example: "1"
        type: string
      gram:
        description: Gram
        example: 12
        type: integer
      hasReference:
        description: HasReference
        example: false
        type: boolean
      page:
        description: Page
        example: 30
        type: integer
      pattern:
        description: Pattern
        example: TABLE
        type: string
      plate:
        description: Plate
        example: LARGE
        type: string
      priceRef:
        description: Price
        example: 5.5
        type: number
      productTitle:
        description: ProductTitle
        example: cut8
        type: string
    type: object
  dto.Production:
    properties:
      id:
        description: Document id
        example: 1
        type: integer
      items:
        description: Related items
        items:
          $ref: '#/definitions/dto.ProductionItem'
        type: array
      remark:
        description: Document remark
        example: test 123
        type: string
    type: object
  dto.ProductionItem:
    properties:
      color:
        description: Color (1,4)
        example: "1"
        type: string
      createdAt:
        description: Created date
        example: "2024-12-07T19:04:39.70268+07:00"
        type: string
      gram:
        description: Notebook grams (40-150)
        example: 40
        type: integer
      hasReference:
        description: Has reference
        example: false
        type: boolean
      page:
        description: Page count (30-80)
        example: 40
        type: integer
      pattern:
        description: Page pattern
        example: TABLE
        type: string
      plate:
        description: Plate size (LARGE, SMALL)
        example: LARGE
        type: string
      productTitle:
        description: Product name
        example: Cut 8
        type: string
      quantity:
        description: Product quantity
        example: 1000
        type: integer
      status:
        description: Production status
        example: PRINTING
        type: string
      updatedAt:
        description: Updated date
        example: "2024-12-07T19:04:39.70268+07:00"
        type: string
    type: object
  dto.ProductionItemResponse:
    properties:
      id:
        description: Document id
        example: 1
        type: integer
      itemId:
        description: item id of production
        example: 2
        type: integer
      status:
        description: Document status
        example: DESIGNING
        type: string
    type: object
  dto.ProductionResponse:
    properties:
      id:
        description: Document id
        example: 1
        type: integer
      items:
        description: Related items
        items:
          $ref: '#/definitions/dto.ProductionItem'
        type: array
      remark:
        description: Document remark
        example: test remark
        type: string
      schoolAddress:
        description: School address
        example: 33/33 Sriratch road
        type: string
      schoolName:
        description: School name
        example: School 1
        type: string
      schoolTelephone:
        description: School telephone
        example: "0812232212"
        type: string
      storeName:
        description: Store name
        example: Notebook store
        type: string
      userId:
        description: Owner uuid
        example: 78705ee5-25cd-45b5-8cb1-63f1cb94e5c8
        type: string
      userName:
        description: User name
        example: adminTest
        type: string
    type: object
  dto.QuotationItem:
    properties:
      color:
        description: Color (1,4)
        example: "1"
        type: string
      gram:
        description: Notebook grams (40-150)
        example: 40
        type: integer
      hasReference:
        description: Has reference
        example: false
        type: boolean
      id:
        description: Unique id
        example: 2
        type: integer
      page:
        description: Page count (30-80)
        example: 40
        type: integer
      pattern:
        description: Page pattern
        example: TABLE
        type: string
      plate:
        description: Plate size (LARGE, SMALL)
        example: LARGE
        type: string
      price:
        description: Product price
        example: 5.5
        type: number
      productTitle:
        description: Product name
        example: Cut 8
        type: string
      quantity:
        description: Product quantity
        example: 1000
        minimum: 1
        type: integer
    required:
    - color
    - hasReference
    - id
    - pattern
    - price
    - productTitle
    - quantity
    type: object
  dto.QuotationResponse:
    properties:
      appointmentAt:
        description: Appointment date (null is now)
        example: "2024-12-02"
        type: string
      createdAt:
        description: Created date
        example: "2024-12-07T19:04:39.70268+07:00"
        type: string
      dueDateAt:
        description: Last due date
        example: "2024-12-02"
        type: string
      id:
        description: Document id
        example: 1
        type: integer
      items:
        description: Quotation product list
        items:
          $ref: '#/definitions/dto.QuotationItem'
        type: array
      production:
        allOf:
        - $ref: '#/definitions/dto.Production'
        description: Production related
      productionId:
        description: Production id related
        example: 32
        type: integer
      remark:
        description: Document remark
        example: test remark
        type: string
      schoolAddress:
        description: School address
        example: 33/33 Sriratch road
        type: string
      schoolName:
        description: School name
        example: School 1
        type: string
      schoolTelephone:
        description: School telephone
        example: "0812232212"
        type: string
      status:
        description: Document status (REVIEWING, APPROVED, CANCELED)
        example: REVIEWING
        type: string
      storeName:
        description: Store name
        example: Notebook store
        type: string
      updatedAt:
        description: Latest update date
        example: "2024-12-07T19:04:39.70268+07:00"
        type: string
      userId:
        description: Owner uuid
        example: 78705ee5-25cd-45b5-8cb1-63f1cb94e5c8
        type: string
      userName:
        description: User name
        example: munggytest
        type: string
    type: object
  dto.ResponseWithToken:
    properties:
      expiredIn:
        description: Token expired in (second)
        example: 3600
        type: integer
      token:
        description: JWT Token
        example: token123
        type: string
    type: object
  dto.SchoolResponse:
    properties:
      address:
        description: address
        example: 22/11 test address
        type: string
      createdAt:
        description: Created user date
        example: "2024-12-07T19:04:39.70268+07:00"
        type: string
      id:
        description: id
        example: 1
        type: integer
      name:
        description: name
        example: school 1
        type: string
      telephone:
        description: User tier (1,2,3)
        example: "0815231112"
        type: string
      updatedAt:
        description: Latest update user date
        example: "2024-12-07T19:04:39.70268+07:00"
        type: string
    type: object
  dto.UpdateQuotation:
    properties:
      items:
        description: Quotation product list
        items:
          $ref: '#/definitions/dto.QuotationItem'
        type: array
      status:
        description: Document status
        example: APPROVED
        type: string
    required:
    - items
    - status
    type: object
  dto.UpdateStatusItemProduction:
    properties:
      status:
        description: Document status
        example: DESIGNING
        type: string
    type: object
  dto.UpdateUser:
    properties:
      password:
        description: Secure password
        example: Password@1234
        type: string
      storeName:
        description: User's shop name
        example: Example Shop
        type: string
      tierId:
        description: User tier (1,2,3)
        example: 1
        type: integer
      username:
        description: Username
        example: testuser123
        type: string
    required:
    - password
    - storeName
    - tierId
    - username
    type: object
  dto.UserResponse:
    properties:
      createdAt:
        description: Created user date
        example: "2024-12-07T19:04:39.70268+07:00"
        type: string
      id:
        description: UUID generate from database
        example: be40de0f-ba3d-44d8-9c80-023ac23e0b9a
        type: string
      role:
        description: User role (ADMIN, CUSTOMER)
        example: CUSTOMER
        type: string
      storeName:
        description: User's shop name
        example: Test Store
        type: string
      tierId:
        description: User tier (1,2,3)
        example: 1
        type: integer
      updatedAt:
        description: Latest update user date
        example: "2024-12-07T19:04:39.70268+07:00"
        type: string
      username:
        description: Username
        example: testuser1
        type: string
    type: object
  helper.ApiSuccessResponse:
    properties:
      code:
        description: HTTP status
        example: 200
        type: integer
      data:
        description: Returning data
      message:
        description: Return message
        example: Success
        type: string
    type: object
externalDocs:
  description: OpenAPI
  url: https://swagger.io/resources/open-api/
info:
  contact:
    email: support@tickbook.net
    name: API Support
    url: http://tickbook.net/support
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://tickbook.net/tos
  title: Tickbook API
  version: "1.0"
paths:
  /login:
    post:
      consumes:
      - application/json
      operationId: Login
      parameters:
      - description: Login request
        in: body
        name: loginRequest
        required: true
        schema:
          $ref: '#/definitions/dto.Login'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.ResponseWithToken'
        "400":
          description: Bad request
        "401":
          description: Unauthorized
      security:
      - JwtToken: []
      tags:
      - login
  /priceRef:
    get:
      consumes:
      - application/json
      operationId: GetPriceRefByUserID
      parameters:
      - description: User's UUID
        in: query
        name: userId
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/helper.ApiSuccessResponse'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/dto.PriceRefResponse'
                  type: array
              type: object
        "400":
          description: Bad request
        "401":
          description: Unauthorized
      security:
      - JwtToken: []
      tags:
      - priceReferences
    post:
      consumes:
      - application/json
      operationId: CreatePriceRef
      parameters:
      - description: Create priceRef request
        in: body
        name: createPriceRefDTO
        schema:
          items:
            $ref: '#/definitions/dto.CreatePriceRef'
          type: array
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            allOf:
            - $ref: '#/definitions/helper.ApiSuccessResponse'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/dto.PriceRefResponse'
                  type: array
              type: object
        "400":
          description: Bad request
        "401":
          description: Unauthorized
        "500":
          description: Internal Server Error
      security:
      - JwtToken: []
      tags:
      - priceReferences
  /production/{productionId}:
    get:
      consumes:
      - application/json
      operationId: GetProductionByID
      parameters:
      - description: production ID
        in: path
        name: productionId
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/helper.ApiSuccessResponse'
            - properties:
                data:
                  $ref: '#/definitions/dto.ProductionResponse'
              type: object
        "400":
          description: Bad request
        "401":
          description: Unauthorized
      security:
      - JwtToken: []
      tags:
      - production
  /production/{productionId}/items/{itemId}:
    put:
      consumes:
      - application/json
      operationId: UpdateStatusProductionByID
      parameters:
      - description: production ID
        in: path
        name: productionId
        type: string
      - description: item ID
        in: path
        name: itemId
        type: string
      - description: Update status item production request
        in: body
        name: UpdateStatusItemProductionDTO
        schema:
          $ref: '#/definitions/dto.UpdateStatusItemProduction'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/helper.ApiSuccessResponse'
            - properties:
                data:
                  $ref: '#/definitions/dto.ProductionItemResponse'
              type: object
        "400":
          description: Bad request
        "401":
          description: Unauthorized
      security:
      - JwtToken: []
      tags:
      - production
  /quotation:
    get:
      consumes:
      - application/json
      operationId: GetAllQuotation
      parameters:
      - in: query
        name: includeProduction
        type: boolean
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/helper.ApiSuccessResponse'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/dto.QuotationResponse'
                  type: array
              type: object
        "400":
          description: Bad request
        "401":
          description: Unauthorized
      security:
      - JwtToken: []
      tags:
      - quotations
    post:
      consumes:
      - application/json
      operationId: CreateQuotation
      parameters:
      - description: Request
        in: body
        name: createQuotationDTO
        schema:
          $ref: '#/definitions/dto.CreateQuotation'
      produces:
      - application/json
      responses:
        "201":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/helper.ApiSuccessResponse'
            - properties:
                data:
                  $ref: '#/definitions/dto.QuotationResponse'
              type: object
        "400":
          description: Bad request
        "401":
          description: Unauthorized
      security:
      - JwtToken: []
      tags:
      - quotations
  /quotation/{quotationId}:
    get:
      consumes:
      - application/json
      operationId: GetQuotationByID
      parameters:
      - description: quotation ID
        in: path
        name: quotationId
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/helper.ApiSuccessResponse'
            - properties:
                data:
                  $ref: '#/definitions/dto.QuotationResponse'
              type: object
        "400":
          description: Bad request
        "401":
          description: Unauthorized
      security:
      - JwtToken: []
      tags:
      - quotations
    put:
      consumes:
      - application/json
      operationId: UpdateQuotation
      parameters:
      - description: Quotation id
        in: path
        name: quotationId
        type: integer
      - description: Update quotation request
        in: body
        name: updateQuotationDTO
        schema:
          $ref: '#/definitions/dto.UpdateQuotation'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/helper.ApiSuccessResponse'
            - properties:
                data:
                  $ref: '#/definitions/dto.QuotationResponse'
              type: object
        "400":
          description: Bad request
        "401":
          description: Unauthorized
        "500":
          description: Internal Server Error
      security:
      - JwtToken: []
      tags:
      - quotations
  /quotation/stat:
    get:
      consumes:
      - application/json
      operationId: CountQuotationByStatus
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/helper.ApiSuccessResponse'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/dto.CountByStatus'
                  type: array
              type: object
        "400":
          description: Bad request
        "401":
          description: Unauthorized
      security:
      - JwtToken: []
      tags:
      - quotations
  /school:
    get:
      consumes:
      - application/json
      operationId: GetSchoolByUserId
      parameters:
      - description: User's UUID
        in: query
        name: userId
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/helper.ApiSuccessResponse'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/dto.SchoolResponse'
                  type: array
              type: object
        "400":
          description: Bad request
        "401":
          description: Unauthorized
      security:
      - JwtToken: []
      tags:
      - schools
    post:
      consumes:
      - application/json
      operationId: CreateSchool
      parameters:
      - description: Create school request
        in: body
        name: createSchoolDTO
        schema:
          $ref: '#/definitions/dto.CreateSchool'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            allOf:
            - $ref: '#/definitions/helper.ApiSuccessResponse'
            - properties:
                data:
                  $ref: '#/definitions/dto.SchoolResponse'
              type: object
        "400":
          description: Bad request
        "401":
          description: Unauthorized
        "500":
          description: Internal Server Error
      security:
      - JwtToken: []
      tags:
      - schools
  /user:
    get:
      consumes:
      - application/json
      operationId: GetAllUsers
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/helper.ApiSuccessResponse'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/dto.UserResponse'
                  type: array
              type: object
        "400":
          description: Bad request
        "401":
          description: Unauthorized
      security:
      - JwtToken: []
      tags:
      - users
    post:
      consumes:
      - application/json
      operationId: CreateUser
      parameters:
      - description: Create user request
        in: body
        name: createUserDTO
        schema:
          $ref: '#/definitions/dto.CreateUser'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            allOf:
            - $ref: '#/definitions/helper.ApiSuccessResponse'
            - properties:
                data:
                  $ref: '#/definitions/dto.UserResponse'
              type: object
        "400":
          description: Bad request
        "401":
          description: Unauthorized
        "500":
          description: Internal Server Error
      security:
      - JwtToken: []
      tags:
      - users
  /user/{userId}:
    delete:
      consumes:
      - application/json
      operationId: DeleteUser
      parameters:
      - description: User's UUID
        in: path
        name: userId
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Bad request
        "401":
          description: Unauthorized
        "500":
          description: Internal Server Error
      security:
      - JwtToken: []
      tags:
      - users
    get:
      consumes:
      - application/json
      operationId: GetUserByID
      parameters:
      - description: user ID
        in: path
        name: userId
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/helper.ApiSuccessResponse'
            - properties:
                data:
                  $ref: '#/definitions/dto.UserResponse'
              type: object
        "400":
          description: Bad request
        "401":
          description: Unauthorized
      security:
      - JwtToken: []
      tags:
      - users
    put:
      consumes:
      - application/json
      operationId: UpdateUser
      parameters:
      - description: Update user request
        in: body
        name: updateUserDTO
        schema:
          $ref: '#/definitions/dto.UpdateUser'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/helper.ApiSuccessResponse'
            - properties:
                data:
                  $ref: '#/definitions/dto.UserResponse'
              type: object
        "400":
          description: Bad request
        "401":
          description: Unauthorized
        "500":
          description: Internal Server Error
      security:
      - JwtToken: []
      tags:
      - users
  /user/info:
    get:
      consumes:
      - application/json
      operationId: GetInfoUser
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/helper.ApiSuccessResponse'
            - properties:
                data:
                  $ref: '#/definitions/dto.UserResponse'
              type: object
        "400":
          description: Bad request
        "401":
          description: Unauthorized
      security:
      - JwtToken: []
      tags:
      - users
schemes:
- https
- http
securityDefinitions:
  JwtToken:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
