definitions:
  dto.CreateSchool:
    properties:
      address:
        description: Address
        example: 81 test address
        type: string
      name:
        description: Name
        example: school 2
        type: string
      telephone:
        description: Telephone
        example: "0815231112"
        type: string
      userId:
        description: UserID
        example: ebf889fd-4f3c-4c15-b44b-1d37cd2ee5e4
        type: string
    required:
    - address
    - name
    - telephone
    - userId
    type: object
  dto.CreateUser:
    properties:
      password:
        description: Secure password
        example: Password@1234
        type: string
      storeName:
        description: User's shop name
        example: Example Shop
        type: string
      tierId:
        description: User tier (1,2,3)
        example: 1
        type: integer
      username:
        description: Username
        example: testuser123
        type: string
    required:
    - password
    - storeName
    - tierId
    - username
    type: object
  dto.Login:
    properties:
      password:
        description: Password
        example: Password@123
        minLength: 8
        type: string
      username:
        description: Username
        example: testuser123
        type: string
    required:
    - password
    - username
    type: object
  dto.ResponseWithToken:
    properties:
      expiredIn:
        description: Token expired in (second)
        example: 3600
        type: integer
      token:
        description: JWT Token
        example: token123
        type: string
    type: object
  dto.SchoolResponse:
    properties:
      address:
        description: address
        example: 22/11 test address
        type: string
      createdAt:
        description: Created user date
        example: "2024-12-02T00:26:21.087061Z"
        type: string
      name:
        description: name
        example: school 1
        type: string
      telephone:
        description: User tier (1,2,3)
        example: "0815231112"
        type: string
      updatedAt:
        description: Latest update user date
        example: "2024-12-02T00:26:21.087061Z"
        type: string
    type: object
  dto.UpdateUser:
    properties:
      password:
        description: Secure password
        example: Password@1234
        type: string
      storeName:
        description: User's shop name
        example: Example Shop
        type: string
      tierId:
        description: User tier (1,2,3)
        example: 1
        type: integer
      username:
        description: Username
        example: testuser123
        type: string
    required:
    - password
    - storeName
    - tierId
    - username
    type: object
  dto.UserResponse:
    properties:
      createdAt:
        description: Created user date
        example: "2024-12-02T00:26:21.087061Z"
        type: string
      id:
        description: UUID generate from database
        example: be40de0f-ba3d-44d8-9c80-023ac23e0b9a
        type: string
      role:
        description: User role (ADMIN, CUSTOMER)
        example: CUSTOMER
        type: string
      storeName:
        description: User's shop name
        example: Test Store
        type: string
      tierId:
        description: User tier (1,2,3)
        example: 1
        type: integer
      updatedAt:
        description: Latest update user date
        example: "2024-12-02T00:26:21.087061Z"
        type: string
      username:
        description: Username
        example: testuser1
        type: string
    type: object
  helper.ApiSuccessResponse:
    properties:
      code:
        description: HTTP status
        example: 200
        type: integer
      data:
        description: Returning data
      message:
        description: Return message
        example: Success
        type: string
    type: object
externalDocs:
  description: OpenAPI
  url: https://swagger.io/resources/open-api/
info:
  contact:
    email: support@tickbook.net
    name: API Support
    url: http://tickbook.net/support
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://tickbook.net/
  title: Tickbook API
  version: "1.0"
paths:
  /api/login:
    post:
      consumes:
      - application/json
      operationId: Login
      parameters:
      - description: Login request
        in: body
        name: loginRequest
        required: true
        schema:
          $ref: '#/definitions/dto.Login'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.ResponseWithToken'
        "400":
          description: Bad request
        "401":
          description: Unauthorized
      security:
      - JWTToken: []
      tags:
      - login
  /school:
    get:
      consumes:
      - application/json
      operationId: GetSchoolByUserId
      parameters:
      - description: User's UUID
        in: query
        name: userId
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/helper.ApiSuccessResponse'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/dto.SchoolResponse'
                  type: array
              type: object
        "400":
          description: Bad request
        "401":
          description: Unauthorized
      security:
      - JWTToken: []
      tags:
      - schools
    post:
      consumes:
      - application/json
      operationId: CreateSchool
      parameters:
      - description: Create school request
        in: body
        name: createSchoolDTO
        schema:
          $ref: '#/definitions/dto.CreateSchool'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            allOf:
            - $ref: '#/definitions/helper.ApiSuccessResponse'
            - properties:
                data:
                  $ref: '#/definitions/dto.SchoolResponse'
              type: object
        "400":
          description: Bad request
        "401":
          description: Unauthorized
        "500":
          description: Internal Server Error
      security:
      - JWTToken: []
      tags:
      - schools
  /user:
    get:
      consumes:
      - application/json
      operationId: GetAllUsers
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/helper.ApiSuccessResponse'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/dto.UserResponse'
                  type: array
              type: object
        "400":
          description: Bad request
        "401":
          description: Unauthorized
      security:
      - JWTToken: []
      tags:
      - users
    post:
      consumes:
      - application/json
      operationId: CreateUser
      parameters:
      - description: Create user request
        in: body
        name: createUserDTO
        schema:
          $ref: '#/definitions/dto.CreateUser'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            allOf:
            - $ref: '#/definitions/helper.ApiSuccessResponse'
            - properties:
                data:
                  $ref: '#/definitions/dto.UserResponse'
              type: object
        "400":
          description: Bad request
        "401":
          description: Unauthorized
        "500":
          description: Internal Server Error
      security:
      - JWTToken: []
      tags:
      - users
  /user/{userId}:
    delete:
      consumes:
      - application/json
      operationId: DeleteUser
      parameters:
      - description: User's UUID
        in: path
        name: userId
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Bad request
        "401":
          description: Unauthorized
        "500":
          description: Internal Server Error
      security:
      - JWTToken: []
      tags:
      - users
    put:
      consumes:
      - application/json
      operationId: UpdateUser
      parameters:
      - description: Update user request
        in: body
        name: updateUserDTO
        schema:
          $ref: '#/definitions/dto.UpdateUser'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/helper.ApiSuccessResponse'
            - properties:
                data:
                  $ref: '#/definitions/dto.UserResponse'
              type: object
        "400":
          description: Bad request
        "401":
          description: Unauthorized
        "500":
          description: Internal Server Error
      security:
      - JWTToken: []
      tags:
      - users
  /user/info:
    get:
      consumes:
      - application/json
      operationId: GetInfoUser
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/helper.ApiSuccessResponse'
            - properties:
                data:
                  $ref: '#/definitions/dto.UserResponse'
              type: object
        "400":
          description: Bad request
        "401":
          description: Unauthorized
      security:
      - JWTToken: []
      tags:
      - users
schemes:
- https
- http
securityDefinitions:
  JwtToken:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
